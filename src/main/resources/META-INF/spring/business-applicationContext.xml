<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd         
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd                       
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd                                      
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd                                   
         http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<context:annotation-config />
	<aop:aspectj-autoproxy />

	<bean class="py.com.sodep.mobileforms.impl.authorization.AuthorizationAspect">
	</bean>
	<bean class="py.com.sodep.mobileforms.impl.ElapsedTimeAspect">
	</bean>

	<!-- Enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="myTxManager" />

	<context:component-scan base-package="py.com.sodep.mobileforms.impl" />

	<!-- bean post-processor for JPA annotations -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Exception translation bean post processor -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean id="FSProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="searchSystemEnvironment" value="true" />
		<property name="locations">
			<list>
				<value>file:///${MOBILEFORMS_HOME}/jdbc.properties</value>
				<value>file:///${MOBILEFORMS_HOME}/hibernate.properties</value>
				<value>file:///${MOBILEFORMS_HOME}/mongo.properties</value>
				<value>file:///${MOBILEFORMS_HOME}/mail.properties</value>
				<value>file:///${MOBILEFORMS_HOME}/server.properties</value>
			</list>
		</property>
	</bean>

	<bean id="myTxManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="myEmf" />
	</bean>

	<bean id="myEmf"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="persistenceXmlLocation">
			<value>classpath:/META-INF/persistence.xml</value>
		</property>
		<property name="persistenceUnitName" value="mobileforms"></property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="POSTGRESQL" />
				<property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />
				<property name="showSql" value="false"></property>
			</bean>
		</property>
		<property name="jpaProperties">
			<!-- set extra properties here, e.g. for Hibernate: -->
			<props>
				<!-- <prop key="hibernate.hbm2ddl.auto">validate</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
	</bean>

	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="javaMailProperties">
			<props>
				<!-- Use SMTP transport protocol -->
				<prop key="mail.transport.protocol">${mail.transport.protocol}</prop>
				<!-- Use SMTP-AUTH to authenticate to SMTP server -->
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<!-- Use TLS to encrypt communication with SMTP server -->
				<prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
				<prop key="mail.debug">${mail.debug}</prop>
			</props>
		</property>
	</bean>

	<!-- Mail worker -->


	<!-- <task:executor id="mailExecutor" pool-size="1" queue-capacity="1" rejection-policy="DISCARD" 
		/> -->

	<bean id="worker.mailQueueWorker"
		class="py.com.sodep.mobileforms.impl.services.workers.MailQueueWorker">
		<!-- <constructor-arg> -->
		<!-- <ref bean="mailExecutor"></ref> -->
		<!-- </constructor-arg> -->
		<property name="maxMails">
			<value>${mail.queue.sendMax}</value>
		</property>
	</bean>
	<task:scheduler id="MailQueueWorkerScheduler"
		pool-size="1" />
	<task:scheduled-tasks scheduler="MailQueueWorkerScheduler">
		<task:scheduled ref="worker.mailQueueWorker"
			method="doWork" fixed-delay="${mail.queue.delay}" />
	</task:scheduled-tasks>



	<!-- End of Mail Worker -->


	<!-- Document Worker -->



	<!-- All tasks performed in the scheduler are the same. They take a job 
		out of the DB and process it. The processing shouldn't take too much, so 
		we keep the number of threads low. Since all tasks perform the same operation, 
		there is no problem of just discarding a task scheduler -->
	<task:executor id="documentProcessorExecutor" pool-size="2-5"
		queue-capacity="5" rejection-policy="DISCARD" />
	<bean id="worker.DocumentWorker"
		class="py.com.sodep.mobileforms.impl.services.workers.DocumentProcessorWorker">
		<!-- <constructor-arg> <ref bean="documentProcessorExecutor"></ref> </constructor-arg> -->
		<property name="executor">
			<ref bean="documentProcessorExecutor" />
		</property>
	</bean>

	<task:scheduled-tasks scheduler="documentProcessorScheduler">
		<task:scheduled ref="worker.DocumentWorker" method="scheduleWork"
			fixed-rate="60000" />
	</task:scheduled-tasks>
	<task:scheduler id="documentProcessorScheduler"
		pool-size="1" />

	<!-- End of Document Worker -->

	<bean
		class="py.com.sodep.mobileforms.impl.services.config.ApplicationStartupManager"
		init-method="postInitialized" />

	<bean id="transactionManager"
		class="py.com.sodep.mobileforms.impl.services.data.TransactionManager">
		<constructor-arg name="hostIdentifier">
			<value>t1</value>
		</constructor-arg>
	</bean>
	<bean id="data.DataAccessService"
		class="py.com.sodep.mobileforms.impl.services.data.DataAccessService">
		<constructor-arg name="transactionManager">
			<ref local="transactionManager" />
		</constructor-arg>
	</bean>

	<bean id="roleService"
		class="py.com.sodep.mobileforms.impl.services.metadata.core.RoleService">
	</bean>

	<!-- <context:property-placeholder location="classpath:dummy_license.properties" 
		/> -->
	<!-- <bean class="py.com.sodep.mobileforms.impl.licensemanager.DummyLicenseImpl"></bean> -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
	</bean>

</beans>

