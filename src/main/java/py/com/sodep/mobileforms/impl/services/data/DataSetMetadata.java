package py.com.sodep.mobileforms.impl.services.data;

import org.apache.commons.lang3.math.NumberUtils;
import org.bson.types.ObjectId;

import py.com.sodep.mobileforms.api.services.data.MFStorable;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;

/**
 * This class keeps information of a given data set and it is meant only for
 * internal use.
 * 
 * 
 * @author danicricco
 * 
 */
class DataSetMetadata implements MFStorable {

	public static final String FIELD_TRANSACTION_STATUS = "status";
	public static final String FIELD_LAST_VERSION = "lastVersion";
	public static final String FIELD_SEQUENCE = "sequence";
	public static final String FIELD_REVISION = "revision";

	public static enum TRANSACTION_STATE {
		NONE, PENDING
	};

	private Long lastVersion;
	private TRANSACTION_STATE status;
	private Long sequence;
	private Long revision;

	public DataSetMetadata() {
		this.status = TRANSACTION_STATE.NONE;
		this.lastVersion = 0l;
		this.sequence = 0l;
		this.revision = 0l;
	}

	// This is the unique ID generated by mongo
	private String objectId;

	/**
	 * Every time there is an operation that changes the data this number grows.
	 * There might be an insert with several registers, but it is just a single
	 * operation, so this number will only grow by 1.
	 * 
	 * @return
	 */
	public Long getRevision() {
		return revision;
	}

	public void setRevision(Long revision) {
		this.revision = revision;
	}

	/**
	 * The version use for the DDL definition. This is one number more than the
	 * last version of stored in MFDataSetDefinition. The number grows every
	 * time a new definition is added.
	 * 
	 * @return
	 */
	public Long getLastVersion() {
		return lastVersion;
	}

	public void setLastVersion(Long lastVersion) {
		this.lastVersion = lastVersion;
	}

	public TRANSACTION_STATE getStatus() {
		return status;
	}

	public void setStatus(TRANSACTION_STATE status) {
		this.status = status;
	}

	public String getObjectId() {
		return objectId;
	}

	public Long getSequence() {
		return sequence;
	}

	@Override
	public DBObject toMongo() {
		BasicDBObject obj = new BasicDBObject();
		if (this.objectId != null) {
			obj.put(MFStorable._ID, new ObjectId(this.objectId));
		}
		obj.put(FIELD_LAST_VERSION, lastVersion);
		obj.put(FIELD_TRANSACTION_STATUS, status.ordinal());
		obj.put(FIELD_SEQUENCE, sequence);
		obj.put(FIELD_REVISION, revision);

		return obj;
	}

	@Override
	public void fromMongo(DBObject o) {
		this.objectId = ((ObjectId) o.get(MFStorable._ID)).toString();
		lastVersion = (Long) o.get(FIELD_LAST_VERSION);
		Object statusFromMongodb = o.get(FIELD_TRANSACTION_STATUS);
        if(statusFromMongodb != null) {
            if (statusFromMongodb instanceof Integer) {
                status = TRANSACTION_STATE.values()[(Integer) statusFromMongodb];
            } else if (statusFromMongodb instanceof Double) {
                status = TRANSACTION_STATE.values()[((Double) statusFromMongodb).intValue()];
            } else {
                status = TRANSACTION_STATE.values()[NumberUtils.createInteger(statusFromMongodb.toString())];
            }
        } else {
            throw new RuntimeException("status cannot be null!");
        }
		sequence = (Long) o.get(FIELD_SEQUENCE);
		revision = (Long) o.get(FIELD_REVISION);

	}

}
